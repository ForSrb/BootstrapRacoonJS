openapi: 3.0.3
info:
  title: BootstrapBugZ
  description: Description
  termsOfService: https://swagger.io/terms/
  contact:
    email: dejan.zdravkovic@protonmail.com
  license:
    name: MIT License
    url: https://choosealicense.com/licenses/mit/
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
  - url: https://localhost:8080/v1
  - url: http://localhost:18080/v1
  - url: https://localhost:18080/v1
tags:
  - name: auth
    description: Authentication endpoints
  - name: users
    description: Users endpoints
paths:
  /auth/tokens:
    post:
      tags:
        - auth
      summary: Create access and refresh tokens
      requestBody:
        description: Auth tokens request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthTokensRequest"
            example:
              usernameOrEmail: john.doe@localhost
              password: qwerty123
      responses:
        200:
          description: Auth tokens created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokensDTO"
              example:
                accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0yMFQxNDozMzo0NC43MDcyOTMzMDlaIiwiZXhwIjoxNjM0NzQxMzI0LCJ1c2VySWQiOjJ9.uXOVA1q-o2DtHmwBAzEfqEm8GLpAhXrYo0rlZ_6NFbBGILhkV74x-Iu9W2uSfSlwp1IfKPCHlR6zWVPvAbhWVw
                refreshToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0xOVQxMzowMDowMy45MDYzNDQyMDJaIiwiZXhwIjoxNjM1MjUzMjAzLCJ1c2VySWQiOjJ9.RHzh6qyGJEKYdvCuCF7wPoUGBSrDGeoY8dSTBhuv21Fzw_CPEa5KeI3MOYgSN3zA1o_ZlKwjHgpSsPM3xAO_DQ
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
    delete:
      tags:
        - auth
      summary: Delete access and refresh tokens
      security:
        - BearerAuth: []
      responses:
        204:
          description: Access and refresh tokens deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
  /auth/devices/tokens:
    delete:
      tags:
        - auth
      summary: Delete access and refresh tokens on all devices
      security:
        - BearerAuth: []
      responses:
        204:
          description: Access and refresh tokens deleted successfully on all devices
        401:
          $ref: "#/components/responses/Unauthorized"
  /auth/tokens/refresh:
    post:
      tags:
        - auth
      summary: Refresh auth tokens
      requestBody:
        description: Refresh auth tokens request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshAuthTokensRequest"
            example:
              refreshToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0xOVQxMzowMDowMy45MDYzNDQyMDJaIiwiZXhwIjoxNjM1MjUzMjAzLCJ1c2VySWQiOjJ9.RHzh6qyGJEKYdvCuCF7wPoUGBSrDGeoY8dSTBhuv21Fzw_CPEa5KeI3MOYgSN3zA1o_ZlKwjHgpSsPM3xAO_DQ
      responses:
        200:
          description: Auth tokens refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokensDTO"
              example:
                accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0yMFQxNDozMzo0NC43MDcyOTMzMDlaIiwiZXhwIjoxNjM0NzQxMzI0LCJ1c2VySWQiOjJ9.uXOVA1q-o2DtHmwBAzEfqEm8GLpAhXrYo0rlZ_6NFbBGILhkV74x-Iu9W2uSfSlwp1IfKPCHlR6zWVPvAbhWVw
                refreshToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0xOVQxMzowMDowMy45MDYzNDQyMDJaIiwiZXhwIjoxNjM1MjUzMjAzLCJ1c2VySWQiOjJ9.RHzh6qyGJEKYdvCuCF7wPoUGBSrDGeoY8dSTBhuv21Fzw_CPEa5KeI3MOYgSN3zA1o_ZlKwjHgpSsPM3xAO_DQ
        400:
          $ref: "#/components/responses/BadRequest"
  /auth/password/forgot:
    post:
      tags:
        - auth
      summary: Send forgot password email
      requestBody:
        description: Forgot password request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
            example:
              email: john.doe@localhost
      responses:
        204:
          description: Forgot password email sent successfully
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /auth/password/reset:
    post:
      tags:
        - auth
      summary: Reset password
      requestBody:
        description: Reset password request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
            example:
              token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0yMFQxNDozMzo0NC43MDcyOTMzMDlaIiwiZXhwIjoxNjM0NzQxMzI0LCJ1c2VySWQiOjJ9.uXOVA1q-o2DtHmwBAzEfqEm8GLpAhXrYo0rlZ_6NFbBGILhkV74x-Iu9W2uSfSlwp1IfKPCHlR6zWVPvAbhWVw
              password: qwerty321
              confirmPassword: qwerty321
      responses:
        204:
          description: Password reset successfully
        400:
          $ref: "#/components/responses/BadRequest"
  /auth/verification-email:
    post:
      tags:
        - auth
      summary: Send verification email
      requestBody:
        description: Verification email request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerificationEmailRequest"
            example:
              usernameOrEmail: joe.bloggs@localhost
      responses:
        204:
          description: Verification email sent successfully
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
  /users:
    post:
      tags:
        - users
      summary: Create user
      security:
        - {}
        - BearerAuth: []
      requestBody:
        description: Create user request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
            examples:
              sign-up:
                value:
                  firstName: Joe
                  lastName: Bloggs
                  username: joe.bloggs
                  email: joe.bloggs@localhost
                  password: qwerty123
                  confirmPassword: qwerty123
              admin-create-user:
                value:
                  firstName: Joe
                  lastName: Bloggs
                  username: joe.bloggs
                  email: joe.bloggs@localhost
                  password: qwerty123
                  confirmPassword: qwerty123
                  active: true
                  lock: false
                  roles:
                    - name: USER
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 5
                firstName: Joe
                lastName: Bloggs
                username: joe.bloggs
                email: joe.bloggs@localhost
                active: false
                lock: false
                createdAt: 2023-05-18T00:51:50.758738
                roles:
                  - name: USER
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
    get:
      tags:
        - users
      summary: Get users
      security:
        - {}
        - BearerAuth: []
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDTO"
              examples:
                non-signed-in-and-regular-user:
                  value:
                    - id: 1
                      firstName: Admin
                      lastName: Admin
                      username: admin
                      email: null
                      active: true
                      lock: false
                      roles: null
                    - id: 2
                      firstName: User
                      lastName: User
                      username: user
                      email: null
                      active: true
                      lock: false
                      roles: null
                    - id: 3
                      firstName: John
                      lastName: Doe
                      username: john.doe
                      email: null
                      active: true
                      lock: false
                      roles: null
                    - id: 4
                      firstName: Jane
                      lastName: Doe
                      username: jane
                      email: null
                      active: true
                      lock: false
                      roles: null
                admin-user:
                  value:
                    - id: 1
                      firstName: Admin
                      lastName: Admin
                      username: admin
                      email: admin@localhost
                      active: true
                      lock: false
                      roles:
                        - name: USER
                        - name: ADMIN
                    - id: 2
                      firstName: User
                      lastName: User
                      username: user
                      email: user@localhost
                      active: true
                      lock: false
                      roles:
                        - name: USER
                    - id: 3
                      firstName: John
                      lastName: Doe
                      username: john.doe
                      email: john.doe@localhost
                      active: true
                      lock: false
                      roles:
                        - name: USER
                    - id: 4
                      firstName: Jane
                      lastName: Doe
                      username: jane
                      email: jane.doe@localhost
                      active: true
                      lock: false
                      roles:
                        - name: USER
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by id
      security:
        - {}
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: User id
          example: 3
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              examples:
                non-signed-in-or-regular-user:
                  value:
                    id: 3
                    firstName: John
                    lastName: Doe
                    username: john.doe
                    email: null
                    active: true
                    lock: false
                    roles: null
                user-profile:
                  value:
                    id: 3
                    firstName: John
                    lastName: Doe
                    username: john.doe
                    email: john.doe@localhost
                    active: true
                    lock: false
                    roles: null
                admin-user:
                  value:
                    id: 3
                    firstName: John
                    lastName: Doe
                    username: john.doe
                    email: john.doe@localhost
                    active: true
                    lock: false
                    roles:
                      - name: USER
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      tags:
        - users
      summary: Update user by id
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: User id
          example: 4
      requestBody:
        description: Update user request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
            examples:
              user-profile:
                value:
                  firstName: Joe
                  lastName: Bloggs
                  username: joe.bloggs
                  email: joe.bloggs@localhost@localhost
              admin-user:
                value:
                  firstName: Jane
                  lastName: Doe
                  username: jane
                  email: jane.doe@localhost
                  active: true
                  lock: false
                  roles:
                    - name: USER
                    - name: ADMIN
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              examples:
                user-profile:
                  value:
                    id: 4
                    firstName: Joe
                    lastName: Bloggs
                    username: joe.bloggs
                    email: joe.bloggs@localhost@localhost
                    active: false
                    lock: false
                    createdAt: 2023-05-18T00:51:50.758738
                    roles: null
                admin-user:
                  value:
                    id: 4
                    firstName: Jane
                    lastName: Doe
                    username: jane
                    email: jane.doe@localhost
                    active: true
                    lock: false
                    createdAt: 2023-05-18T00:51:50.758738
                    roles:
                      - name: USER
                      - name: ADMIN
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        409:
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - users
      summary: Delete user by id
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: User id
          example: 4
      responses:
        204:
          description: User deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
  /users/password:
    post:
      tags:
        - users
      summary: Change signed in user password
      security:
        - BearerAuth: []
      requestBody:
        description: Change password request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
            example:
              currentPassword: qwerty123
              newPassword: qwerty321
              confirmNewPassword: qwerty321
      responses:
        204:
          description: Password changed successfully
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
  /users/active:
    post:
      tags:
        - users
      summary: Activate user by token
      requestBody:
        description: Activate user request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivateUserRequest"
            example:
              token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0yMFQxNDozMzo0NC43MDcyOTMzMDlaIiwiZXhwIjoxNjM0NzQxMzI0LCJ1c2VySWQiOjJ9.uXOVA1q-o2DtHmwBAzEfqEm8GLpAhXrYo0rlZ_6NFbBGILhkV74x-Iu9W2uSfSlwp1IfKPCHlR6zWVPvAbhWVw
      responses:
        204:
          description: User active successfully
        400:
          $ref: "#/components/responses/BadRequest"
        409:
          $ref: "#/components/responses/Conflict"
components:
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 400
            error: Bad Request
            details:
              - field: field1
                message: Invalid field1.
              - field: field2
                message: Invalid field2.
    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 404
            error: Not Found
            details:
              - message: Resource Not Found.
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 401
            error: Unauthorized
            details:
              - message: Unauthorized.
    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 403
            error: Forbidden
            details:
              - message: Forbidden.
    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 409
            error: Conflict
            details:
              - field?: field
                message: Conflict.
  schemas:
    AuthTokensRequest:
      type: object
      required:
        - usernameOrEmail
        - password
      properties:
        usernameOrEmail:
          type: string
        password:
          type: string
    RefreshAuthTokensRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          format: JWT
    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    ResetPasswordRequest:
      type: object
      required:
        - token
        - password
        - confirmPassword
      properties:
        token:
          type: string
          format: JWT
        password:
          type: string
        confirmPassword:
          type: string
    VerificationEmailRequest:
      type: object
      required:
        - usernameOrEmail
      properties:
        usernameOrEmail:
          type: string
    CreateUserRequest:
      type: object
      required:
        - firstName
        - lastName
        - username
        - email
        - password
        - confirmPassword
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        confirmPassword:
          type: string
        active:
          type: boolean
        lock:
          type: boolean
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleDTO"
    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        confirmPassword:
          type: string
        active:
          type: boolean
        lock:
          type: boolean
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleDTO"
    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
        - confirmNewPassword
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
        confirmNewPassword:
          type: string
    ActivateUserRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          format: JWT
    AuthTokensDTO:
      type: object
      properties:
        accessToken:
          type: string
          format: JWT
        refreshToken:
          type: string
          format: JWT
    RoleDTO:
      type: object
      properties:
        name:
          type: string
          enum:
            - USER
            - ADMIN
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        active:
          type: boolean
        lock:
          type: boolean
        createdAt:
          type: string
          format: date-time
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleDTO"
    ErrorMessage:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                nullable: true
              message:
                type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
