openapi: 3.0.3
info:
  title: BootstrapBugZ
  description: Description
  termsOfService: https://swagger.io/terms/
  contact:
    email: dejan.zdravkovic@protonmail.com
  license:
    name: MIT License
    url: https://choosealicense.com/licenses/mit/
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
  - url: https://localhost:8080/v1
  - url: http://localhost:18080/v1
  - url: https://localhost:18080/v1
tags:
  - name: auth
    description: Auth Endpoints
  - name: user
    description: User Endpoints
  - name: profile
    description: Profile Endpoints
  - name: admin
    description: Admin Endpoints
paths:
  /auth/sign-up:
    post:
      tags:
        - auth
      summary: Sign Up
      operationId: signUp
      x-codegen-request-body-name: body
      requestBody:
        description: Sign Up Request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
            example:
              firstName: Joe
              lastName: Bloggs
              username: joe.bloggs
              email: joe.bloggs@localhost
              password: qwerty123
              confirmPassword: qwerty123
      responses:
        201:
          description: Sign Up Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 5
                firstName: Joe
                lastName: Bloggs
                username: joe.bloggs
                email: joe.bloggs@localhost
                activated: false
                nonLocked: true
                createdAt: 2023-05-18T00:51:50.758738
                roles:
                  - name: USER
        400:
          $ref: "#/components/responses/BadRequest"
  /auth/resend-confirmation-email:
    post:
      tags:
        - auth
      summary: Resend Confirmation Email
      operationId: resendConfirmationEmail
      x-codegen-request-body-name: body
      requestBody:
        description: Resend Confirmation Email Request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendConfirmationEmailRequest"
            example:
              usernameOrEmail: joe.bloggs@localhost
      responses:
        204:
          description: Resend Confirmation Email Success
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
  /auth/confirm-registration:
    post:
      tags:
        - auth
      summary: Confirm Registration
      operationId: confirmRegistration
      x-codegen-request-body-name: body
      requestBody:
        description: Confirm Registration Request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmRegistrationRequest"
            example:
              token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0yMFQxNDozMzo0NC43MDcyOTMzMDlaIiwiZXhwIjoxNjM0NzQxMzI0LCJ1c2VySWQiOjJ9.uXOVA1q-o2DtHmwBAzEfqEm8GLpAhXrYo0rlZ_6NFbBGILhkV74x-Iu9W2uSfSlwp1IfKPCHlR6zWVPvAbhWVw
      responses:
        204:
          description: Confirm Registration Success
        400:
          $ref: "#/components/responses/BadRequest"
        409:
          $ref: "#/components/responses/Conflict"
  /auth/sign-in:
    post:
      tags:
        - auth
      summary: Sign In
      operationId: signIn
      x-codegen-request-body-name: body
      requestBody:
        description: Sign In Request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
            example:
              usernameOrEmail: john.doe@localhost
              password: qwerty123
      responses:
        200:
          description: Sign In Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignInDTO"
              example:
                accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0yMFQxNDozMzo0NC43MDcyOTMzMDlaIiwiZXhwIjoxNjM0NzQxMzI0LCJ1c2VySWQiOjJ9.uXOVA1q-o2DtHmwBAzEfqEm8GLpAhXrYo0rlZ_6NFbBGILhkV74x-Iu9W2uSfSlwp1IfKPCHlR6zWVPvAbhWVw
                refreshToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0xOVQxMzowMDowMy45MDYzNDQyMDJaIiwiZXhwIjoxNjM1MjUzMjAzLCJ1c2VySWQiOjJ9.RHzh6qyGJEKYdvCuCF7wPoUGBSrDGeoY8dSTBhuv21Fzw_CPEa5KeI3MOYgSN3zA1o_ZlKwjHgpSsPM3xAO_DQ
                user:
                  id: 3
                  firstName: John
                  lastName: Doe
                  username: john.doe
                  email: john.doe@localhost
                  activated: true
                  nonLocked: true
                  createdAt: 2023-05-18T00:51:50.758738
                  roles:
                    - name: USER
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
  /auth/refresh-token:
    post:
      tags:
        - auth
      summary: Refresh Token
      operationId: refreshToken
      x-codegen-request-body-name: body
      requestBody:
        description: Refresh Token Request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
            example:
              refreshToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0xOVQxMzowMDowMy45MDYzNDQyMDJaIiwiZXhwIjoxNjM1MjUzMjAzLCJ1c2VySWQiOjJ9.RHzh6qyGJEKYdvCuCF7wPoUGBSrDGeoY8dSTBhuv21Fzw_CPEa5KeI3MOYgSN3zA1o_ZlKwjHgpSsPM3xAO_DQ
      responses:
        200:
          description: Refresh Token Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenDTO"
              example:
                accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0yMFQxNDozMzo0NC43MDcyOTMzMDlaIiwiZXhwIjoxNjM0NzQxMzI0LCJ1c2VySWQiOjJ9.uXOVA1q-o2DtHmwBAzEfqEm8GLpAhXrYo0rlZ_6NFbBGILhkV74x-Iu9W2uSfSlwp1IfKPCHlR6zWVPvAbhWVw
                refreshToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0xOVQxMzowMDowMy45MDYzNDQyMDJaIiwiZXhwIjoxNjM1MjUzMjAzLCJ1c2VySWQiOjJ9.RHzh6qyGJEKYdvCuCF7wPoUGBSrDGeoY8dSTBhuv21Fzw_CPEa5KeI3MOYgSN3zA1o_ZlKwjHgpSsPM3xAO_DQ
        400:
          $ref: "#/components/responses/BadRequest"
  /auth/sign-out:
    post:
      tags:
        - auth
      summary: Sign Out
      operationId: signOut
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      responses:
        204:
          description: Sign Out Success
        401:
          $ref: "#/components/responses/Unauthorized"
  /auth/sign-out-from-all-devices:
    post:
      tags:
        - auth
      summary: Sign Out From All Devices
      operationId: signOutFromAllDevices
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      responses:
        204:
          description: Sign Out From All Devices Success
        401:
          $ref: "#/components/responses/Unauthorized"
  /auth/forgot-password:
    post:
      tags:
        - auth
      summary: Forgot Password
      operationId: forgotPassword
      x-codegen-request-body-name: body
      requestBody:
        description: Forgot Password Request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
            example:
              email: john.doe@localhost
      responses:
        204:
          description: Forgot Password Success
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Reset Password
      operationId: resetPassword
      x-codegen-request-body-name: body
      requestBody:
        description: Reset Password Request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
            example:
              token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0yMFQxNDozMzo0NC43MDcyOTMzMDlaIiwiZXhwIjoxNjM0NzQxMzI0LCJ1c2VySWQiOjJ9.uXOVA1q-o2DtHmwBAzEfqEm8GLpAhXrYo0rlZ_6NFbBGILhkV74x-Iu9W2uSfSlwp1IfKPCHlR6zWVPvAbhWVw
              password: qwerty321
              confirmPassword: qwerty321
      responses:
        204:
          description: Reset Password Success
        400:
          $ref: "#/components/responses/BadRequest"
  /auth/signed-in-user:
    get:
      tags:
        - auth
      summary: Signed In User
      operationId: signedInUser
      security:
        - BearerAuth: []
      responses:
        200:
          description: Signed In User Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 2
                firstName: John
                lastName: Doe
                username: john.doe
                email: john.doe@localhost
                activated: true
                nonLocked: true
                createdAt: 2023-05-18T00:51:50.758738
                roles:
                  - name: USER
        401:
          $ref: "#/components/responses/Unauthorized"
  /auth/username-availability:
    get:
      tags:
        - auth
      summary: Username Availability
      operationId: usernameAvailability
      parameters:
        - in: query
          name: username
          required: true
          schema:
            type: string
          description: Pass username to check if it's available.
          example: john.doe
      responses:
        200:
          description: Username Availability Success
          content:
            application/json:
              schema:
                type: boolean
              examples:
                username-available:
                  value: true
                username-taken:
                  value: false
  /auth/email-availability:
    get:
      tags:
        - auth
      summary: Email Availability
      operationId: emailAvailability
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
          description: Pass email to check if it's available.
          example: john.doe@localhost
      responses:
        200:
          description: Email Availability Success
          content:
            application/json:
              schema:
                type: boolean
              examples:
                email-available:
                  value: true
                email-taken:
                  value: false
  /users:
    get:
      tags:
        - user
      summary: Get Users
      operationId: getUsers
      security:
        - {}
        - BearerAuth: []
      responses:
        200:
          description: Get Users Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDTO"
              examples:
                non-signed-in-and-regular-user:
                  value:
                    - id: 1
                      firstName: Admin
                      lastName: Admin
                      username: admin
                      email: null
                      activated: true
                      nonLocked: true
                      roles: null
                    - id: 2
                      firstName: User
                      lastName: User
                      username: user
                      email: null
                      activated: true
                      nonLocked: true
                      roles: null
                    - id: 3
                      firstName: John
                      lastName: Doe
                      username: john.doe
                      email: null
                      activated: true
                      nonLocked: true
                      roles: null
                    - id: 4
                      firstName: Jane
                      lastName: Doe
                      username: jane
                      email: null
                      activated: true
                      nonLocked: true
                      roles: null
                admin:
                  value:
                    - id: 1
                      firstName: Admin
                      lastName: Admin
                      username: admin
                      email: admin@localhost
                      activated: true
                      nonLocked: true
                      roles:
                        - name: USER
                        - name: ADMIN
                    - id: 2
                      firstName: User
                      lastName: User
                      username: user
                      email: user@localhost
                      activated: true
                      nonLocked: true
                      roles:
                        - name: USER
                    - id: 3
                      firstName: John
                      lastName: Doe
                      username: john.doe
                      email: john.doe@localhost
                      activated: true
                      nonLocked: true
                      roles:
                        - name: USER
                    - id: 4
                      firstName: Jane
                      lastName: Doe
                      username: jane
                      email: jane.doe@localhost
                      activated: true
                      nonLocked: true
                      roles:
                        - name: USER
  /users/{username}:
    get:
      tags:
        - user
      summary: Get User
      operationId: getUser
      security:
        - {}
        - BearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: Pass username to get user.
          example: john.doe
      responses:
        200:
          description: Get User Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              examples:
                non-signed-in-or-requesting-other:
                  value:
                    id: 3
                    firstName: John
                    lastName: Doe
                    username: john.doe
                    email: null
                    activated: true
                    nonLocked: true
                    roles: null
                signed-in-requesting-himself:
                  value:
                    id: 3
                    firstName: John
                    lastName: Doe
                    username: john.doe
                    email: john.doe@localhost
                    activated: true
                    nonLocked: true
                    roles: null
                admin:
                  value:
                    id: 3
                    firstName: John
                    lastName: Doe
                    username: john.doe
                    email: john.doe@localhost
                    activated: true
                    nonLocked: true
                    roles:
                      - name: USER
        404:
          $ref: "#/components/responses/NotFound"
  /profile:
    patch:
      tags:
        - profile
      summary: Update Profile
      operationId: updateProfile
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      requestBody:
        description: Update Profile Request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileRequest"
            example:
              firstName: Joe
              lastName: Blow
              username: joe.blow
              email: joe.blow@localhost
      responses:
        200:
          description: Update Profile Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 4
                firstName: Joe
                lastName: Blow
                username: joe.blow
                email: joe.blow@localhost
                activated: false
                nonLocked: true
                createdAt: 2023-05-18T00:51:50.758738
                roles:
                  - name: USER
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        409:
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - profile
      summary: Delete Profile
      operationId: deleteProfile
      security:
        - BearerAuth: []
      responses:
        204:
          description: Delete Profile Success
        401:
          $ref: "#/components/responses/Unauthorized"
  /profile/password:
    patch:
      tags:
        - profile
      summary: Change Password
      operationId: changePassword
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      requestBody:
        description: Change Password Request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
            example:
              oldPassword: qwerty123
              newPassword: qwerty321
              confirmNewPassword: qwerty321
      responses:
        204:
          description: Change Password Success
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
  /admin/users/{username}/active:
    patch:
      tags:
        - admin
      summary: Activate User
      operationId: activateUser
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: Pass username to activate user.
          example: john.doe
      requestBody:
        description: Activate User Request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: boolean
            example:
              state: true
      responses:
        204:
          description: Activate User Success
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/users/{username}/lock:
    patch:
      tags:
        - admin
      summary: Lock User
      operationId: lockUser
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: Pass username to lock user.
          example: john.doe
      requestBody:
        description: Lock User Request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: boolean
            example:
              state: true
      responses:
        204:
          description: Lock User Success
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/users/{username}/roles:
    patch:
      tags:
        - admin
      summary: Update User Roles
      operationId: updateUserRoles
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: Pass username to update user roles.
          example: john.doe
      requestBody:
        description: Update User Roles Request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoleRequest"
            example:
              roleNames:
                - USER
                - ADMIN
      responses:
        204:
          description: Update Users Roles Success
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/users/{username}:
    delete:
      tags:
        - admin
      summary: Delete User
      operationId: deleteUser
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: Pass username to delete user.
          example: john.doe
      responses:
        204:
          description: Delete Users Success
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
components:
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 400
            error: Bad Request
            details:
              - field: field1
                message: Invalid field1.
              - field: field2
                message: Invalid field2.
    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 404
            error: Not Found
            details:
              - message: Resource Not Found.
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 401
            error: Unauthorized
            details:
              - message: Unauthorized.
    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 403
            error: Forbidden
            details:
              - message: Forbidden.
    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 409
            error: Conflict
            details:
              - field?: field
                message: Conflict.
  schemas:
    SignUpRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        confirmPassword:
          type: string
    ConfirmRegistrationRequest:
      type: object
      properties:
        token:
          type: string
          format: JWT
    ResendConfirmationEmailRequest:
      type: object
      properties:
        usernameOrEmail:
          type: string
    SignInRequest:
      type: object
      properties:
        usernameOrEmail:
          type: string
        password:
          type: string
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          format: JWT
    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
          format: JWT
        password:
          type: string
        confirmPassword:
          type: string
    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
        confirmNewPassword:
          type: string
    UpdateRoleRequest:
      type: object
      properties:
        roleNames:
          type: array
          items:
            type: string
            enum:
              - USER
              - ADMIN
    RoleDTO:
      type: object
      properties:
        name:
          type: string
          enum:
            - USER
            - ADMIN
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        activated:
          type: boolean
        nonLocked:
          type: boolean
        createdAt:
          type: string
          format: date-time
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleDTO"
    SignInDTO:
      type: object
      properties:
        accessToken:
          type: string
          format: JWT
        refreshToken:
          type: string
          format: JWT
        user:
          $ref: "#/components/schemas/UserDTO"
    RefreshTokenDTO:
      properties:
        accessToken:
          type: string
          format: JWT
        refreshToken:
          type: string
          format: JWT
    ErrorMessage:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                nullable: true
              message:
                type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
